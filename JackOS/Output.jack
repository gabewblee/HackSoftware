/**
 * Output class provides text output functionality for the JackOS.
 * 
 * This class manages text display on the screen through a character-based
 * interface. It maintains cursor position, handles character rendering,
 * and provides methods for printing strings, integers, and individual
 * characters. The screen is organized as a 23x64 character grid with
 * each character occupying 11x16 pixels.
 * 
 * Screen Layout:
 * - 23 rows (0-22) by 64 columns (0-63)
 * - Each character is 11 pixels wide by 16 pixels tall
 * - Screen memory starts at address 16384
 * - 32 words per row (2 characters per word, stored in high/low halves)
 * 
 * Key Features:
 * - Cursor position management with automatic line wrapping
 * - Character font mapping with 127 ASCII characters
 * - String and integer printing with formatting
 * - Backspace and newline handling
 * - Automatic screen scrolling when reaching the bottom
 */
class Output {
    static int cursorHalf;      // Current column within the word (0-31)
    static int cursorAddr;      // Current memory address in screen memory
    static boolean lowHalf;     // True if cursor is in low half of word
    static String intBuf;       // Buffer for integer-to-string conversion
    static int screenBase;      // Base address of screen memory (16384)
    static Array map;           // Character font mapping array
    static Array shiftedMap;    // Pre-shifted character patterns for efficiency

    /**
     * Initializes the Output system.
     * 
     * Sets up the screen base address, creates the integer buffer,
     * initializes the character font map, creates pre-shifted patterns
     * for efficient rendering, and positions the cursor at the top-left
     * corner of the screen.
     */
    function void init() {
        let screenBase = 16384;
        let intBuf = String.new(6);
        do Output.initMap();
        do Output.createShiftedMap();
        // Use the official way to set the cursor: compute from row/col
        do Output.moveCursor(0, 0);
        return;
    }

    function void initMap() {
        let map = Array.new(127);
        // unknown char (0)
        do Output.create(0, 63,63,63,63,63,63,63,63,63,0,0);
        // space
        do Output.create(32, 0,0,0,0,0,0,0,0,0,0,0);
        // !
        do Output.create(33, 12,30,30,30,12,12,0,12,12,0,0);
        // "
        do Output.create(34, 54,54,20,0,0,0,0,0,0,0,0);
        // #
        do Output.create(35, 0,18,18,63,18,18,63,18,18,0,0);
        // $
        do Output.create(36, 12,30,51,3,30,48,51,30,12,12,0);
        // %
        do Output.create(37, 0,0,35,51,24,12,6,51,49,0,0);
        // &
        do Output.create(38, 12,30,30,12,54,27,27,27,54,0,0);
        // '
        do Output.create(39, 12,12,6,0,0,0,0,0,0,0,0);
        // (
        do Output.create(40, 24,12,6,6,6,6,6,12,24,0,0);
        // )
        do Output.create(41, 6,12,24,24,24,24,24,12,6,0,0);
        // *
        do Output.create(42, 0,0,0,51,30,63,30,51,0,0,0);
        // +
        do Output.create(43, 0,0,0,12,12,63,12,12,0,0,0);
        // ,
        do Output.create(44, 0,0,0,0,0,0,0,12,12,6,0);
        // -
        do Output.create(45, 0,0,0,0,0,63,0,0,0,0,0);
        // .
        do Output.create(46, 0,0,0,0,0,0,0,12,12,0,0);
        // /
        do Output.create(47, 0,0,32,48,24,12,6,3,1,0,0);
        // 0
        do Output.create(48, 12,30,51,51,51,51,51,51,30,12,0);
        // 1
        do Output.create(49, 12,14,15,12,12,12,12,12,63,0,0);
        // 2
        do Output.create(50, 30,51,48,24,12,6,3,51,63,0,0);
        // 3
        do Output.create(51, 30,51,48,48,28,48,48,51,30,0,0);
        // 4
        do Output.create(52, 16,24,28,26,25,63,24,24,60,0,0);
        // 5
        do Output.create(53, 63,3,3,31,48,48,48,51,30,0,0);
        // 6
        do Output.create(54, 28,6,3,3,31,51,51,51,30,0,0);
        // 7
        do Output.create(55, 63,49,48,48,24,12,12,12,12,0,0);
        // 8
        do Output.create(56, 30,51,51,51,30,51,51,51,30,0,0);
        // 9
        do Output.create(57, 30,51,51,51,62,48,48,24,14,0,0);
        // :
        do Output.create(58, 0,0,12,12,0,0,12,12,0,0,0);
        // ;
        do Output.create(59, 0,0,12,12,0,0,12,12,6,0,0);
        // <
        do Output.create(60, 0,0,24,12,6,3,6,12,24,0,0);
        // =
        do Output.create(61, 0,0,0,0,63,0,0,63,0,0,0);
        // >
        do Output.create(62, 0,0,3,6,12,24,12,6,3,0,0);
        // @
        do Output.create(64, 30,51,51,59,59,59,27,3,30,0,0);
        // ? (63)
        do Output.create(63, 30,51,51,24,12,12,0,12,12,0,0);
        // A
        do Output.create(65, 12,30,51,51,63,51,51,51,51,0,0);
        // B
        do Output.create(66, 31,51,51,51,31,51,51,51,31,0,0);
        // C
        do Output.create(67, 28,54,35,3,3,3,35,54,28,0,0);
        // D
        do Output.create(68, 15,27,51,51,51,51,51,27,15,0,0);
        // E
        do Output.create(69, 63,51,35,11,15,11,35,51,63,0,0);
        // F
        do Output.create(70, 63,51,35,11,15,11,3,3,3,0,0);
        // G
        do Output.create(71, 28,54,35,3,59,51,51,54,44,0,0);
        // H
        do Output.create(72, 51,51,51,51,63,51,51,51,51,0,0);
        // I
        do Output.create(73, 30,12,12,12,12,12,12,12,30,0,0);
        // J
        do Output.create(74, 60,24,24,24,24,24,27,27,14,0,0);
        // K
        do Output.create(75, 51,51,51,27,15,27,51,51,51,0,0);
        // L
        do Output.create(76, 3,3,3,3,3,3,35,51,63,0,0);
        // M
        do Output.create(77, 33,51,63,63,51,51,51,51,51,0,0);
        // N
        do Output.create(78, 51,51,55,55,63,59,59,51,51,0,0);
        // O
        do Output.create(79, 30,51,51,51,51,51,51,51,30,0,0);
        // P
        do Output.create(80, 31,51,51,51,31,3,3,3,3,0,0);
        // Q
        do Output.create(81, 30,51,51,51,51,51,63,59,30,48,0);
        // R
        do Output.create(82, 31,51,51,51,31,27,51,51,51,0,0);
        // S
        do Output.create(83, 30,51,51,6,28,48,51,51,30,0,0);
        // T
        do Output.create(84, 63,63,45,12,12,12,12,12,30,0,0);
        // U
        do Output.create(85, 51,51,51,51,51,51,51,51,30,0,0);
        // V
        do Output.create(86, 51,51,51,51,51,30,30,12,12,0,0);
        // W
        do Output.create(87, 51,51,51,51,51,63,63,63,18,0,0);
        // X
        do Output.create(88, 51,51,30,30,12,30,30,51,51,0,0);
        // Y
        do Output.create(89, 51,51,51,51,30,12,12,12,30,0,0);
        // Z
        do Output.create(90, 63,51,49,24,12,6,35,51,63,0,0);
        // [
        do Output.create(91, 30,6,6,6,6,6,6,6,30,0,0);
        // \
        do Output.create(92, 0,0,1,3,6,12,24,48,32,0,0);
        // ]
        do Output.create(93, 30,24,24,24,24,24,24,24,30,0,0);
        // ^
        do Output.create(94, 8,28,54,0,0,0,0,0,0,0,0);
        // _
        do Output.create(95, 0,0,0,0,0,0,0,0,0,63,0);
        // `
        do Output.create(96, 6,12,24,0,0,0,0,0,0,0,0);
        // a
        do Output.create(97, 0,0,0,14,24,30,27,27,54,0,0);
        // b
        do Output.create(98, 3,3,3,15,27,51,51,51,30,0,0);
        // c
        do Output.create(99, 0,0,0,30,51,3,3,51,30,0,0);
        // d
        do Output.create(100, 48,48,48,60,54,51,51,51,30,0,0);
        // e
        do Output.create(101, 0,0,0,30,51,63,3,51,30,0,0);
        // f
        do Output.create(102, 28,54,38,6,15,6,6,6,15,0,0);
        // g
        do Output.create(103, 0,0,30,51,51,51,62,48,51,30,0);
        // h
        do Output.create(104, 3,3,3,27,55,51,51,51,51,0,0);
        // i
        do Output.create(105, 12,12,0,14,12,12,12,12,30,0,0);
        // j
        do Output.create(106, 48,48,0,56,48,48,48,48,51,30,0);
        // k
        do Output.create(107, 3,3,3,51,27,15,15,27,51,0,0);
        // l
        do Output.create(108, 14,12,12,12,12,12,12,12,30,0,0);
        // m
        do Output.create(109, 0,0,0,29,63,43,43,43,43,0,0);
        // n
        do Output.create(110, 0,0,0,29,51,51,51,51,51,0,0);
        // o
        do Output.create(111, 0,0,0,30,51,51,51,51,30,0,0);
        // p
        do Output.create(112, 0,0,0,30,51,51,51,31,3,3,0);
        // q
        do Output.create(113, 0,0,0,30,51,51,51,62,48,48,0);
        // r
        do Output.create(114, 0,0,0,29,55,51,3,3,7,0,0);
        // s
        do Output.create(115, 0,0,0,30,51,6,24,51,30,0,0);
        // t
        do Output.create(116, 4,6,6,15,6,6,6,54,28,0,0);
        // u
        do Output.create(117, 0,0,0,27,27,27,27,27,54,0,0);
        // v
        do Output.create(118, 0,0,0,51,51,51,51,30,12,0,0);
        // w
        do Output.create(119, 0,0,0,51,51,51,63,63,18,0,0);
        // x
        do Output.create(120, 0,0,0,51,30,12,12,30,51,0,0);
        // y
        do Output.create(121, 0,0,0,51,51,51,62,48,24,15,0);
        // z
        do Output.create(122, 0,0,0,63,27,12,6,51,63,0,0);
        // {
        do Output.create(123, 56,12,12,12,7,12,12,12,56,0,0);
        // |
        do Output.create(124, 12,12,12,12,12,12,12,12,12,0,0);
        // }
        do Output.create(125, 7,12,12,12,56,12,12,12,7,0,0);
        // ~
        do Output.create(126, 38,45,25,0,0,0,0,0,0,0,0);
        return;
    }

    function void create(int code, int r0, int r1, int r2, int r3, int r4, int r5, int r6, int r7, int r8, int r9, int r10) {
        var Array glyph;
        let glyph = Array.new(11);
        let glyph[0] = r0;
        let glyph[1] = r1;
        let glyph[2] = r2;
        let glyph[3] = r3;
        let glyph[4] = r4;
        let glyph[5] = r5;
        let glyph[6] = r6;
        let glyph[7] = r7;
        let glyph[8] = r8;
        let glyph[9] = r9;
        let glyph[10] = r10;
        let map[code] = glyph;
        return;
    }

    function void createShiftedMap() {
        var int i, j;
        var Array src, dst;
        let shiftedMap = Array.new(127);
        let i = 32;
        while (i < 127) {
            let src = map[i];
            if (~(src = 0)) {
                let dst = Array.new(11);
                let shiftedMap[i] = dst;
                let j = 0;
                while (j < 11) {
                    let dst[j] = Math.multiply(src[j], 256);
                    let j = j + 1;
                }
            }
            let i = i + 1;
        }
        return;
    }

    function Array getMap(int ascii) {
        var Array g;
        if ((ascii < 32) | (ascii > 126)) { let ascii = 0; }
        if (lowHalf) {
            let g = map[ascii];
        } else {
            let g = shiftedMap[ascii];
        }
        return g;
    }

    function void drawChar(char c) {
        var Array glyph;
        var int row, addr, word, cleared;
        let glyph = Output.getMap(c);
        let addr = cursorAddr;
        let row = 0;
        while (row < 11) {
            let word = Memory.peek(screenBase + addr);
            if (lowHalf) {
                let cleared = word & (-256);
            } else {
                let cleared = word & 255;
            }
            do Memory.poke(screenBase + addr, cleared | glyph[row]);
            let addr = addr + 32;
            let row = row + 1;
        }
        return;
    }

    /**
     * Moves the cursor to the specified row and column position.
     * 
     * Calculates the memory address and word position for the given
     * screen coordinates. Each row contains 32 words, and each word
     * holds 2 characters (high and low halves).
     * 
     * @param row The row number (0-22)
     * @param col The column number (0-63)
     * @throws Sys.error(20) if coordinates are out of bounds
     */
    function void moveCursor(int row, int col) {
        if ((row < 0) | (row > 22) | (col < 0) | (col > 63)) {
            do Sys.error(20);
        }
        let cursorHalf = Math.divide(col, 2);
        let cursorAddr = Math.multiply(row, 32) + cursorHalf;
        let lowHalf = (col = Math.multiply(cursorHalf, 2));
        return;
    }

    /**
     * Prints a single character at the current cursor position.
     * 
     * Handles special characters (newline, backspace) and regular characters.
     * For regular characters, draws the character and advances the cursor.
     * Automatically wraps to the next line when reaching the end of a row.
     * 
     * @param c The character to print
     */
    function void printChar(char c) {
        if (c = String.newLine()) {
            do Output.println();
        } else {
            if (c = String.backSpace()) {
                do Output.backSpace();
            } else {
                do Output.drawChar(c);
                if (~lowHalf) {
                    let cursorHalf = cursorHalf + 1;
                    let cursorAddr = cursorAddr + 1;
                }
                if (cursorHalf = 32) {
                    do Output.println();
                } else {
                    let lowHalf = ~lowHalf;
                }
            }
        }
        return;
    }

    /**
     * Prints a string at the current cursor position.
     * 
     * Iterates through each character in the string and prints it
     * using the printChar function, which handles cursor advancement
     * and line wrapping automatically.
     * 
     * @param s The string to print
     */
    function void printString(String s) {
        var int i, n;
        let n = String.length(s);
        let i = 0;
        while (i < n) {
            do Output.printChar(String.charAt(s, i));
            let i = i + 1;
        }
        return;
    }

    /**
     * Prints an integer at the current cursor position.
     * 
     * Converts the integer to a string representation and then
     * prints the string using the printString function.
     * 
     * @param x The integer to print
     */
    function void printInt(int x) {
        do String.setInt(intBuf, x);
        do Output.printString(intBuf);
        return;
    }

    /**
     * Moves the cursor to the beginning of the next line.
     * 
     * Advances the cursor to the start of the next row. If the cursor
     * would go beyond the last row (row 22), it wraps around to the
     * top of the screen (row 0).
     */
    function void println() {
        let cursorAddr = cursorAddr + 32 - cursorHalf;
        let cursorHalf = 0;
        let lowHalf = true;
        if (cursorAddr > 704) { let cursorAddr = 0; }
        return;
    }

    /**
     * Moves the cursor back one position and erases the character.
     * 
     * Handles backspace by moving the cursor backward and drawing
     * a space character to erase the previous character. Properly
     * handles wrapping from the beginning of a line to the end of
     * the previous line.
     */
    function void backSpace() {
        if (lowHalf) {
            if (cursorHalf > 0) {
                let cursorHalf = cursorHalf - 1;
                let cursorAddr = cursorAddr - 1;
            } else {
                let cursorHalf = 31;
                if (cursorAddr = 0) { let cursorAddr = 704; }
                let cursorAddr = cursorAddr - 1;
            }
            let lowHalf = false;
        } else {
            let lowHalf = true;
        }
        do Output.drawChar(32);
        return;
    }
}

